/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NovelContractInterface extends ethers.utils.Interface {
  functions: {
    "addContent(bytes32,uint256,string)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "canAddContent(uint256)": FunctionFragment;
    "completeNovel(bytes32)": FunctionFragment;
    "createNovel((string,string,string,string,string))": FunctionFragment;
    "getAllNovelContents(bytes32)": FunctionFragment;
    "getAllNovels()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getContentCount(bytes32)": FunctionFragment;
    "getNovelContent(uint256)": FunctionFragment;
    "getNovelIndex(bytes32)": FunctionFragment;
    "isAllowedToComplete(bytes32)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addContent",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canAddContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeNovel",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createNovel",
    values: [
      {
        title: string;
        content: string;
        summary: string;
        category: string;
        language: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNovelContents",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNovels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContentCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNovelContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNovelIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedToComplete",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addContent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canAddContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeNovel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNovel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNovelContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNovels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNovelContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNovelIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedToComplete",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ContentAdded(bytes32,uint256)": EventFragment;
    "NovelCompleted(bytes32)": EventFragment;
    "NovelCreated(bytes32,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NovelCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NovelCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type ContentAddedEvent = TypedEvent<
  [string, BigNumber] & { novelId: string; tokenId: BigNumber }
>;

export type NovelCompletedEvent = TypedEvent<[string] & { novelId: string }>;

export type NovelCreatedEvent = TypedEvent<
  [string, string] & { novelId: string; title: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class NovelContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NovelContractInterface;

  functions: {
    addContent(
      _novelId: BytesLike,
      _parentId: BigNumberish,
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    canAddContent(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    completeNovel(
      _novelId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNovel(
      _newNovel: {
        title: string;
        content: string;
        summary: string;
        category: string;
        language: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllNovelContents(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, string, string, BigNumber] & {
          tokenId: BigNumber;
          parentId: BigNumber;
          content: string;
          creator: string;
          createdAt: BigNumber;
        })[]
      ]
    >;

    getAllNovels(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber
        ] & {
          id: string;
          title: string;
          creator: string;
          summary: string;
          category: string;
          language: string;
          isCompleted: boolean;
          createdAt: BigNumber;
          updatedAt: BigNumber;
        })[]
      ]
    >;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContentCount(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNovelContent(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, string, BigNumber] & {
          tokenId: BigNumber;
          parentId: BigNumber;
          content: string;
          creator: string;
          createdAt: BigNumber;
        }
      ]
    >;

    getNovelIndex(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAllowedToComplete(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addContent(
    _novelId: BytesLike,
    _parentId: BigNumberish,
    _content: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  canAddContent(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  completeNovel(
    _novelId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNovel(
    _newNovel: {
      title: string;
      content: string;
      summary: string;
      category: string;
      language: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllNovelContents(
    _novelId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, string, string, BigNumber] & {
      tokenId: BigNumber;
      parentId: BigNumber;
      content: string;
      creator: string;
      createdAt: BigNumber;
    })[]
  >;

  getAllNovels(
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      id: string;
      title: string;
      creator: string;
      summary: string;
      category: string;
      language: string;
      isCompleted: boolean;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    })[]
  >;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getContentCount(
    _novelId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNovelContent(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, BigNumber] & {
      tokenId: BigNumber;
      parentId: BigNumber;
      content: string;
      creator: string;
      createdAt: BigNumber;
    }
  >;

  getNovelIndex(
    _novelId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAllowedToComplete(
    _novelId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addContent(
      _novelId: BytesLike,
      _parentId: BigNumberish,
      _content: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    canAddContent(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    completeNovel(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createNovel(
      _newNovel: {
        title: string;
        content: string;
        summary: string;
        category: string;
        language: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getAllNovelContents(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, string, string, BigNumber] & {
        tokenId: BigNumber;
        parentId: BigNumber;
        content: string;
        creator: string;
        createdAt: BigNumber;
      })[]
    >;

    getAllNovels(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: string;
        title: string;
        creator: string;
        summary: string;
        category: string;
        language: string;
        isCompleted: boolean;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      })[]
    >;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getContentCount(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNovelContent(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        tokenId: BigNumber;
        parentId: BigNumber;
        content: string;
        creator: string;
        createdAt: BigNumber;
      }
    >;

    getNovelIndex(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedToComplete(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "ContentAdded(bytes32,uint256)"(
      novelId?: BytesLike | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { novelId: string; tokenId: BigNumber }
    >;

    ContentAdded(
      novelId?: BytesLike | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { novelId: string; tokenId: BigNumber }
    >;

    "NovelCompleted(bytes32)"(
      novelId?: BytesLike | null
    ): TypedEventFilter<[string], { novelId: string }>;

    NovelCompleted(
      novelId?: BytesLike | null
    ): TypedEventFilter<[string], { novelId: string }>;

    "NovelCreated(bytes32,string)"(
      novelId?: BytesLike | null,
      title?: null
    ): TypedEventFilter<[string, string], { novelId: string; title: string }>;

    NovelCreated(
      novelId?: BytesLike | null,
      title?: null
    ): TypedEventFilter<[string, string], { novelId: string; title: string }>;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    addContent(
      _novelId: BytesLike,
      _parentId: BigNumberish,
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    canAddContent(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeNovel(
      _novelId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNovel(
      _newNovel: {
        title: string;
        content: string;
        summary: string;
        category: string;
        language: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllNovelContents(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllNovels(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContentCount(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNovelContent(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNovelIndex(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedToComplete(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addContent(
      _novelId: BytesLike,
      _parentId: BigNumberish,
      _content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canAddContent(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeNovel(
      _novelId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNovel(
      _newNovel: {
        title: string;
        content: string;
        summary: string;
        category: string;
        language: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllNovelContents(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllNovels(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContentCount(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNovelContent(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNovelIndex(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedToComplete(
      _novelId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
